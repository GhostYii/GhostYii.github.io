I"0<hr />
<h2 id="0x0-引言">0x0. 引言</h2>
<p>对象池是游戏开发中老生常谈的东西了。一个好的对象池对于游戏项目的整体性能提升非常大，本文主要介绍一个开源方便的对象池系统——MLObjectPool。<br />
MLObjectPool是本人在去年开发的一个针对Unity游戏引擎的对象池系统，其以DLL动态库的形式挂载在Unity Engine中。<br />
本模块所有代码已经在github中开源，如需源代码请<a href="https://github.com/GhostYii/MLObjectPool" target="_blank">点击此处</a>。</p>
<blockquote>
  <p>注意：未来MLObjectPool将会整合进MLToolBox运行库项目中。</p>
</blockquote>

<hr />
<h2 id="0x1-如何使用">0x1. 如何使用？</h2>
<p>MLObjectPool工程分为两部分——编辑器拓展与运行时托管库，如有需要对源码进行改造，请将编辑器代码写在MLObjectPool.Editor工程中，其余代码写在MLObjectPool中。<br />
MLObjectPool已经存在两种类型的build-in对象池:Pool&lt; T &gt;和PrefabPool。</p>

<p><strong>如需创建build-in对象池，请使用且仅可使用如下API：</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// &lt;summary&gt;</span>
<span class="c1">/// 创建一个普通对象池</span>
<span class="c1">/// &lt;/summary&gt;</span>
<span class="c1">/// &lt;typeparam name="T"&gt;对象池对象类型&lt;/typeparam&gt;</span>
<span class="c1">/// &lt;param name="name"&gt;对象池名称（不可重复）&lt;/param&gt;</span>
<span class="c1">/// &lt;param name="size"&gt;对象次初始大小&lt;/param&gt;</span>
<span class="c1">/// &lt;param name="autoExpand"&gt;是否自动扩容&lt;/param&gt;</span>
<span class="n">ObjectPoolManager</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">CreatePool</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">autoExpand</span><span class="p">);</span>

<span class="c1">/// &lt;summary&gt;</span>
<span class="c1">/// 创建预制体对象池</span>
<span class="c1">/// &lt;/summary&gt;</span>
<span class="c1">/// &lt;param name="name"&gt;对象池名称（不可重复）&lt;/param&gt;</span>
<span class="c1">/// &lt;param name="go"&gt;对象池预制体&lt;/param&gt;</span>
<span class="c1">/// &lt;param name="size"&gt;对象池大小&lt;/param&gt;</span>
<span class="c1">/// &lt;param name="autoExpand"&gt;是否自动扩容&lt;/param&gt;</span>
<span class="n">ObjectPoolManager</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">CreatePrefabPool</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="n">GameObject</span> <span class="n">go</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">autoExpand</span><span class="p">);</span>
</code></pre></div></div>
<p>Pool对象池和PrefabPool对象池的区别在于PrefabPool中的对象已经限定为GameObject，而Pool则是一个通用对象池，同时<strong>PrefabPool中分配的对象将都带有PrefabPoolObject脚本</strong>。</p>

<p>参数’autoExpand’表示当池被填充时，系统将自动创建更多对象（原始池的大小）以供下一次分配。这意味着<strong>对象池每次填满时都会自动扩展为当前对象池大小的两倍</strong>。</p>

<p>Pool&lt; T&gt;和PrefabPool都会在初始化时进行预热处理，即初始化阶段一次性生成初始大小的所有对象。</p>

<p>对象池通用分配和回收可以使用以下API实现：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//分配</span>
<span class="n">ObjectPool</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">AllocationFromPool</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">);</span>
<span class="c1">//回收</span>
<span class="n">ObjectPool</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">RecycleFromPool</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="n">T</span> <span class="n">obj</span><span class="p">);</span>
</code></pre></div></div>

<hr />
<h2 id="0x2-pool-t和prefabpool如何使用">0x2. Pool&lt; T&gt;和PrefabPool如何使用？</h2>
<p>Pool&lt; T&gt;是MLObjectPool中通用的对象池，但是其分配和回收操作需要手动定义。对Pool&lt; T&gt;，创建、分配和回收调用参考以下API：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//create</span>
<span class="kt">var</span> <span class="n">goPool</span> <span class="p">=</span> <span class="n">ObjectPoolManager</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">CreatePool</span><span class="p">&lt;</span><span class="n">GameObject</span><span class="p">&gt;(</span><span class="s">"gameObject"</span><span class="p">,</span> <span class="m">100</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">//allocation</span>
<span class="kt">var</span> <span class="n">obj</span> <span class="p">=</span> <span class="n">goPool</span><span class="p">.</span><span class="nf">allocation</span><span class="p">();</span>

<span class="c1">//recycle</span>
<span class="n">goPool</span><span class="p">.</span><span class="nf">Recycle</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</code></pre></div></div>

<p>PrefabPool是针对Prefab而言的一种特殊的对象池，其定义了默认的分配与回收操作。对PrefabPool，创建、分配和回收调用参考以下API：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//create</span>
<span class="kt">var</span> <span class="n">prefabPool</span> <span class="p">=</span> <span class="n">ObjectPoolManager</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">CreatePrefabPool</span><span class="p">(</span><span class="s">"prefab"</span><span class="p">,</span> <span class="n">prefab</span><span class="p">,</span> <span class="m">100</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">//allocation</span>
<span class="kt">var</span> <span class="n">prefab</span> <span class="p">=</span> <span class="n">prefabPool</span><span class="p">.</span><span class="nf">Allocation</span><span class="p">();</span>

<span class="c1">//recycle</span>
<span class="n">prefabPool</span><span class="p">.</span><span class="nf">Recycle</span><span class="p">(</span><span class="n">prefab</span><span class="p">);</span>
</code></pre></div></div>

<hr />
<h2 id="0x3-其他功能">0x3. 其他功能</h2>
<h3 id="关于拓展">关于拓展</h3>
<p>MLObjectPool提供了一个基类’<strong>PoolBase</strong>‘供自定义类型的ObjectPool继承。</p>

<h3 id="关于build-in-interface">关于build-in interface</h3>
<p>MLObjectPool中提供了6个接口供pool object自定义对象池各个阶段的操作，其6个接口分别为：</p>
<ul>
  <li>IAllocationHandler : 在对象被分配时调用</li>
  <li>IRecycleHandler   : 在对象被回收时调用</li>
  <li>IBeforeAllocationHandler  : 在对象被分配前调用</li>
  <li>IBeforeRecycleHandler  : 在对象被回收前调用</li>
  <li>IAfterAllocationHandler   : 在对象被分配后调用</li>
  <li>IAfterRecycleHandler  : 在对象被回收后调用</li>
</ul>

<p>其内部调用顺序如下：<br />
在分配阶段：OnBeforeAllocation -&gt; OnAllocation/DefaultAllocation -&gt; OnAfterAllocation<br />
在回收阶段：OnBeforeRecycle -&gt; OnRecycle/DefaultRecycle -&gt; OnAfterRecycle</p>

<p>注意：<strong>pool object实现了IAllocationHandler或者IRecycleHandler接口，其默认的分配/回收操作将被替代</strong>。</p>

<h3 id="关于prefabpool的默认分配回收操作">关于PrefabPool的默认分配/回收操作</h3>
<p>其默认分配/回收代码如下：</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//分配</span>
<span class="k">void</span> <span class="nf">OnGameObjectSpawn</span><span class="p">(</span><span class="n">GameObject</span> <span class="n">obj</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="nf">SetParent</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
    <span class="n">obj</span><span class="p">.</span><span class="nf">SetActive</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//回收</span>
<span class="k">void</span> <span class="nf">OnGameObjectDespawn</span><span class="p">(</span><span class="n">GameObject</span> <span class="n">obj</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">parent</span> <span class="p">=</span> <span class="n">poolRoot</span><span class="p">;</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span><span class="p">;</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">rotation</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">;</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">localScale</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">one</span><span class="p">;</span>
    <span class="n">obj</span><span class="p">.</span><span class="nf">SetActive</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这些接口可以在任意mono脚本中被实现。但是这些接口的调用只能通过Pool&lt; T&gt;或PrefabPool。<br />
如果有自己定义的Pool，需要添加额外的代码以支持这些接口。</p>

<h3 id="关于pooleventtrigger">关于PoolEventTrigger</h3>
<p>PoolEventTrigger是一个PoolEvent的触发器（也是Mono脚本），用户可以添加该触发器在任意GameObject上以实现PoolEvent，PoolEvent即为6个接口所代表的事件。<br />
PoolEventTrigger的使用方法同UGUI中的EventTrigger。</p>

<hr />
<h2 id="0x4-附录">0x4. 附录</h2>
<p>如果你需要MLObjectPool的动态库文件，你可以在下方找到下载地址：</p>
<h3 id="mlobject-v105">MLObject v1.0.5</h3>
<p><a href="https://github.com/GhostYii/MLObjectPool/releases/download/v1.0.5/MLObjectPool.dll">MLObjectPool.dll</a><br />
<a href="https://github.com/GhostYii/MLObjectPool/releases/download/v1.0.5/MLObjectPool.Editor.dll">MLObjectPool.Editor.dll</a></p>

<h3 id="mlobject-v1041">MLObject v1.0.4.1</h3>
<p><a href="https://github.com/GhostYii/MLObjectPool/releases/download/v1.0.4.1/MLObjectPool.dll">MLObjectPool.dll</a><br />
<a href="https://github.com/GhostYii/MLObjectPool/releases/download/v1.0.4.1/MLObjectPool.Editor.dll">MLObjectPool.Editor.dll</a></p>

<hr />

:ET